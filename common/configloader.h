/* This file is generated by genxml. */
/* No manual modification is permitted. */

#pragma once

#include "tinyxml.h"
#include "libcommon.h"









class CConfigLoader
{
public:
	struct STConfig
	{
		STConfig()
		{
			
		}
		
		struct STCommon
		{
			STCommon()
			{
				
				m_igroupid = 0;
				
			}
			
			int32_t m_igroupid;
			

		};
		
		STCommon m_STCommon;
		struct STDataserver
		{
			STDataserver()
			{
				
				m_strip.clear();
				
				m_iport = 0;
				
				m_strscript.clear();
				
			}
			
			std::string m_strip;
			
			int32_t m_iport;
			
			std::string m_strscript;
			
			struct STMysql
			{
				STMysql()
				{
					
					m_strdb.clear();
					
					m_strhost.clear();
					
					m_iport = 0;
					
					m_strpwd.clear();
					
					m_ithreadnum = 0;
					
					m_struser.clear();
					
				}
				
				std::string m_strdb;
				
				std::string m_strhost;
				
				int32_t m_iport;
				
				std::string m_strpwd;
				
				int32_t m_ithreadnum;
				
				std::string m_struser;
				

			};
			
			STMysql m_STMysql;

		};
		
		STDataserver m_STDataserver;
		struct STGameserver
		{
			STGameserver()
			{
				
				m_strscript.clear();
				
			}
			
			std::string m_strscript;
			

		};
		
		STGameserver m_STGameserver;
		struct STGateserver
		{
			STGateserver()
			{
				
				m_strip.clear();
				
				m_stroutip.clear();
				
				m_ioutport = 0;
				
				m_iport = 0;
				
				m_strscript.clear();
				
			}
			
			std::string m_strip;
			
			std::string m_stroutip;
			
			int32_t m_ioutport;
			
			int32_t m_iport;
			
			std::string m_strscript;
			

		};
		
		STGateserver m_STGateserver;
		struct STRobot
		{
			STRobot()
			{
				
				m_inum = 0;
				
				m_strscript.clear();
				
			}
			
			int32_t m_inum;
			
			std::string m_strscript;
			

		};
		
		STRobot m_STRobot;

	};
	
	STConfig & GetConfig()
	{
		return m_STConfig;
	}
	
	bool LoadCfg(const std::string & file)
	{
		TiXmlDocument document;
		if (!document.LoadFile((const char*)file.c_str()))
		{
			LOG_ERROR("CConfigLoader::LoadCfg(%s) failed", (const char*)file.c_str());
			return false;
		}
		
		TiXmlElement* pConfig = document.RootElement();
		if (!pConfig)
		{
			LOG_ERROR("document.RootElement failed");
			return false;
		}
		
		// clear
		STConfig tmp;
		m_STConfig = tmp;
		
		
		
		
		TiXmlNode * pCommon = pConfig->FirstChild("Common");
		if (pCommon)
		{
			
			STConfig::STCommon tmpCommon;
			
			((TiXmlElement *)pCommon)->Attribute("groupid", &tmpCommon.m_igroupid);
			LOG_SYS("		groupid %d", tmpCommon.m_igroupid);
			
			

			m_STConfig.m_STCommon = tmpCommon;
		}
		TiXmlNode * pDataserver = pConfig->FirstChild("Dataserver");
		if (pDataserver)
		{
			
			STConfig::STDataserver tmpDataserver;
			
			tmpDataserver.m_strip = ((TiXmlElement *)pDataserver)->Attribute("ip");
			LOG_SYS("		ip %s", tmpDataserver.m_strip.c_str());
			
			((TiXmlElement *)pDataserver)->Attribute("port", &tmpDataserver.m_iport);
			LOG_SYS("		port %d", tmpDataserver.m_iport);
			
			tmpDataserver.m_strscript = ((TiXmlElement *)pDataserver)->Attribute("script");
			LOG_SYS("		script %s", tmpDataserver.m_strscript.c_str());
			
			
			TiXmlNode * pMysql = pDataserver->FirstChild("Mysql");
			if (pMysql)
			{
			
				STConfig::STDataserver::STMysql tmpMysql;
				
				tmpMysql.m_strdb = ((TiXmlElement *)pMysql)->Attribute("db");
				LOG_SYS("			db %s", tmpMysql.m_strdb.c_str());
				
				tmpMysql.m_strhost = ((TiXmlElement *)pMysql)->Attribute("host");
				LOG_SYS("			host %s", tmpMysql.m_strhost.c_str());
				
				((TiXmlElement *)pMysql)->Attribute("port", &tmpMysql.m_iport);
				LOG_SYS("			port %d", tmpMysql.m_iport);
				
				tmpMysql.m_strpwd = ((TiXmlElement *)pMysql)->Attribute("pwd");
				LOG_SYS("			pwd %s", tmpMysql.m_strpwd.c_str());
				
				((TiXmlElement *)pMysql)->Attribute("threadnum", &tmpMysql.m_ithreadnum);
				LOG_SYS("			threadnum %d", tmpMysql.m_ithreadnum);
				
				tmpMysql.m_struser = ((TiXmlElement *)pMysql)->Attribute("user");
				LOG_SYS("			user %s", tmpMysql.m_struser.c_str());
				
				

				tmpDataserver.m_STMysql = tmpMysql;
			}

			m_STConfig.m_STDataserver = tmpDataserver;
		}
		TiXmlNode * pGameserver = pConfig->FirstChild("Gameserver");
		if (pGameserver)
		{
			
			STConfig::STGameserver tmpGameserver;
			
			tmpGameserver.m_strscript = ((TiXmlElement *)pGameserver)->Attribute("script");
			LOG_SYS("		script %s", tmpGameserver.m_strscript.c_str());
			
			

			m_STConfig.m_STGameserver = tmpGameserver;
		}
		TiXmlNode * pGateserver = pConfig->FirstChild("Gateserver");
		if (pGateserver)
		{
			
			STConfig::STGateserver tmpGateserver;
			
			tmpGateserver.m_strip = ((TiXmlElement *)pGateserver)->Attribute("ip");
			LOG_SYS("		ip %s", tmpGateserver.m_strip.c_str());
			
			tmpGateserver.m_stroutip = ((TiXmlElement *)pGateserver)->Attribute("outip");
			LOG_SYS("		outip %s", tmpGateserver.m_stroutip.c_str());
			
			((TiXmlElement *)pGateserver)->Attribute("outport", &tmpGateserver.m_ioutport);
			LOG_SYS("		outport %d", tmpGateserver.m_ioutport);
			
			((TiXmlElement *)pGateserver)->Attribute("port", &tmpGateserver.m_iport);
			LOG_SYS("		port %d", tmpGateserver.m_iport);
			
			tmpGateserver.m_strscript = ((TiXmlElement *)pGateserver)->Attribute("script");
			LOG_SYS("		script %s", tmpGateserver.m_strscript.c_str());
			
			

			m_STConfig.m_STGateserver = tmpGateserver;
		}
		TiXmlNode * pRobot = pConfig->FirstChild("Robot");
		if (pRobot)
		{
			
			STConfig::STRobot tmpRobot;
			
			((TiXmlElement *)pRobot)->Attribute("num", &tmpRobot.m_inum);
			LOG_SYS("		num %d", tmpRobot.m_inum);
			
			tmpRobot.m_strscript = ((TiXmlElement *)pRobot)->Attribute("script");
			LOG_SYS("		script %s", tmpRobot.m_strscript.c_str());
			
			

			m_STConfig.m_STRobot = tmpRobot;
		}
		
		return true;
	}
	
	bool SaveCfg(const std::string & file)
	{
		TiXmlDocument document;
		
		TiXmlElement tmpXmlConfig("Config");
		
		
		
		
		
		{
			STConfig::STCommon & tmpCommon =  m_STConfig.m_STCommon;
			TiXmlElement * pFather = &tmpXmlConfig;
			
			TiXmlElement tmpXmlCommon("Common");
			
			tmpXmlCommon.SetAttribute("groupid", tmpCommon.m_igroupid);
			LOG_SYS("		groupid %d", tmpCommon.m_igroupid);
			
			
			pFather->InsertEndChild(tmpXmlCommon);

		}
		
		{
			STConfig::STDataserver & tmpDataserver =  m_STConfig.m_STDataserver;
			TiXmlElement * pFather = &tmpXmlConfig;
			
			TiXmlElement tmpXmlDataserver("Dataserver");
			
			tmpXmlDataserver.SetAttribute("ip", tmpDataserver.m_strip.c_str());
			LOG_SYS("		ip %s", tmpDataserver.m_strip.c_str());
			
			tmpXmlDataserver.SetAttribute("port", tmpDataserver.m_iport);
			LOG_SYS("		port %d", tmpDataserver.m_iport);
			
			tmpXmlDataserver.SetAttribute("script", tmpDataserver.m_strscript.c_str());
			LOG_SYS("		script %s", tmpDataserver.m_strscript.c_str());
			
			
			
			{
			STConfig::STDataserver::	STMysql & tmpMysql =  tmpDataserver.m_STMysql;
				TiXmlElement * pFather = &tmpXmlDataserver;
			
				TiXmlElement tmpXmlMysql("Mysql");
				
				tmpXmlMysql.SetAttribute("db", tmpMysql.m_strdb.c_str());
				LOG_SYS("			db %s", tmpMysql.m_strdb.c_str());
				
				tmpXmlMysql.SetAttribute("host", tmpMysql.m_strhost.c_str());
				LOG_SYS("			host %s", tmpMysql.m_strhost.c_str());
				
				tmpXmlMysql.SetAttribute("port", tmpMysql.m_iport);
				LOG_SYS("			port %d", tmpMysql.m_iport);
				
				tmpXmlMysql.SetAttribute("pwd", tmpMysql.m_strpwd.c_str());
				LOG_SYS("			pwd %s", tmpMysql.m_strpwd.c_str());
				
				tmpXmlMysql.SetAttribute("threadnum", tmpMysql.m_ithreadnum);
				LOG_SYS("			threadnum %d", tmpMysql.m_ithreadnum);
				
				tmpXmlMysql.SetAttribute("user", tmpMysql.m_struser.c_str());
				LOG_SYS("			user %s", tmpMysql.m_struser.c_str());
				
				
				pFather->InsertEndChild(tmpXmlMysql);

			}
			
			pFather->InsertEndChild(tmpXmlDataserver);

		}
		
		{
			STConfig::STGameserver & tmpGameserver =  m_STConfig.m_STGameserver;
			TiXmlElement * pFather = &tmpXmlConfig;
			
			TiXmlElement tmpXmlGameserver("Gameserver");
			
			tmpXmlGameserver.SetAttribute("script", tmpGameserver.m_strscript.c_str());
			LOG_SYS("		script %s", tmpGameserver.m_strscript.c_str());
			
			
			pFather->InsertEndChild(tmpXmlGameserver);

		}
		
		{
			STConfig::STGateserver & tmpGateserver =  m_STConfig.m_STGateserver;
			TiXmlElement * pFather = &tmpXmlConfig;
			
			TiXmlElement tmpXmlGateserver("Gateserver");
			
			tmpXmlGateserver.SetAttribute("ip", tmpGateserver.m_strip.c_str());
			LOG_SYS("		ip %s", tmpGateserver.m_strip.c_str());
			
			tmpXmlGateserver.SetAttribute("outip", tmpGateserver.m_stroutip.c_str());
			LOG_SYS("		outip %s", tmpGateserver.m_stroutip.c_str());
			
			tmpXmlGateserver.SetAttribute("outport", tmpGateserver.m_ioutport);
			LOG_SYS("		outport %d", tmpGateserver.m_ioutport);
			
			tmpXmlGateserver.SetAttribute("port", tmpGateserver.m_iport);
			LOG_SYS("		port %d", tmpGateserver.m_iport);
			
			tmpXmlGateserver.SetAttribute("script", tmpGateserver.m_strscript.c_str());
			LOG_SYS("		script %s", tmpGateserver.m_strscript.c_str());
			
			
			pFather->InsertEndChild(tmpXmlGateserver);

		}
		
		{
			STConfig::STRobot & tmpRobot =  m_STConfig.m_STRobot;
			TiXmlElement * pFather = &tmpXmlConfig;
			
			TiXmlElement tmpXmlRobot("Robot");
			
			tmpXmlRobot.SetAttribute("num", tmpRobot.m_inum);
			LOG_SYS("		num %d", tmpRobot.m_inum);
			
			tmpXmlRobot.SetAttribute("script", tmpRobot.m_strscript.c_str());
			LOG_SYS("		script %s", tmpRobot.m_strscript.c_str());
			
			
			pFather->InsertEndChild(tmpXmlRobot);

		}
		
		document.InsertEndChild(tmpXmlConfig);
		
		if (!document.SaveFile((const char*)file.c_str()))
		{
			LOG_ERROR("CConfigLoader::SaveCfg(%s) failed", (const char*)file.c_str());
			return false;
		}
		
		return true;
	}
	
private:
	STConfig m_STConfig;
};

extern CConfigLoader g_CConfigLoader;
